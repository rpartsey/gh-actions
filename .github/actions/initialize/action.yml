name: initialize
runs:
  using: composite
  steps:
  - name: Create date stamp for the beginning of the month
    run: |
      # Use the first day of the current month
      echo $(date +%Y-%m-01) > ~/date_stamp.txt
    shell: bash
  # - name: Delete extraneous circleci environment file
  #   run: rm -rf ~/.circlerc
  #   shell: bash
  # - name: Save conda environment cache
  #   uses: actions/cache@v4
  #   with:
  #     path: ~/miniconda3
  #     key: conda-env-${{ hashFiles('.github/**.yml') }}-${{ hashFiles('environment.yml') }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('~/date_stamp.txt') }}
  # - name: restore_cache
  #   uses: actions/cache@v3.3.2
  #   with:
  #     key: mobile-sam-model
  #     path: UPDATE_ME
  #     restore-keys: mobile-sam-model
  # - name: Install Miniconda3
  #   run: |-
  #     if [ ! -d ~/miniconda3 ]; then
  #       echo "Installing Miniconda3"
  #       wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh
  #       /bin/bash ~/miniconda.sh -b -p ~/miniconda3
  #       rm ~/miniconda.sh
  #     fi

  #     echo "Initializing Miniconda3"
  #     sudo ln -s ~/miniconda3/etc/profile.d/conda.sh /etc/profile.d/conda.sh
  #     . ~/miniconda3/etc/profile.d/conda.sh
  #   shell: bash
  # - name: Install mamba
  #   run: |-
  #     if ! command -v mamba &> /dev/null; then
  #       . ~/miniconda3/bin/activate
  #       echo "Installing Mamba"
  #       conda install -y -c conda-forge mamba=1.5.6 -n base
  #     fi
  #   shell: bash
  # - name: Create conda environment
  #   run: |-
  #     . ~/miniconda3/etc/profile.d/conda.sh

  #     # Check if environment exists, create/update based on that
  #     if conda env list | grep accel-cortex; then
  #       echo "Found existing environment"
  #       # Need to install for creation of the data directory
  #       git submodule update --init submodules/home_robot/
  #       ln -s submodules/home_robot/data data
  #     else
  #       echo "Creating new environment"
  #       mamba env create --file environment.yml
  #       conda activate accel-cortex
  #       pip install --upgrade pip

  #       pip install torch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2 --index-url https://download.pytorch.org/whl/cu118
  #       pip install torch-cluster==1.6.1 -f https://data.pyg.org/whl/torch-2.0.1+cu118.html
  #       pip install "git+https://github.com/facebookresearch/pytorch3d.git@v0.7.4"
  #       pip install -r requirements.txt


  #       pip install spconv-cu113
  #       # install PonderV2 dependencies
  #       cd pretrain
  #       # NeuS renderer
  #       cd libs/smooth-sampler
  #       # e.g. 7.0: V100; 7.5: RTX 3000; 8.0: a100 More available in: https://developer.nvidia.com/cuda-gpus
  #       # So on AWS, it should be "8.0"
  #       TORCH_CUDA_ARCH_LIST="7.5" python setup.py install
  #       cd ../..
  #       # pointops
  #       cd libs/pointops
  #       python setup.py install
  #       cd ../../..


  #       # Added for speed up:
  #       git submodule sync
  #       git submodule update --init || true
  #       git submodule update --init submodules/home_robot/
  #       git submodule update --init submodules/open_eqa/
  #       git submodule update --init --recursive submodules/gsplat/
  #       git submodule update --init --recursive submodules/pytorch-msssim/
  #       git submodule foreach git reset --hard

  #       pip install -e submodules/home_robot/src/home_robot
  #       pip install -e submodules/home_robot/src/home_robot_sim
  #       pip install -e submodules/open_eqa/
  #       pip install -e submodules/gsplat
  #       pip install -e submodules/pytorch-msssim


  #       export ACCEL_CORTEX=/home/circleci/project
  #       export LLM_MM_PATH=/home/circleci/project/LLM_MM_aligner/
  #       export HOME_ROBOT_ROOT=/home/circleci/project/submodules/home_robot
  #       export PYTHONPATH=$PYTHONPATH:$HOME_ROBOT_ROOT/projects/habitat_ovmm/

  #       ln -s submodules/home_robot/data data

  #       pip install hydra_zen
  #       pip install -r LLM_MM_aligner/requirement.txt
  #       pip install kornia
  #       # cd /home/circleci/project/LLM_MM_aligner
  #       # git checkout cortex/main
  #       # cd ../..

  #       # cd /home/circleci/project/submodules/home_robot
  #       # git checkout pmcvay/demo-refactor
  #       # cd ../..

  #       cd submodules/home_robot/
  #       git submodule sync && git submodule update --init src/third_party/habitat-lab
  #       pip install -e src/third_party/habitat-lab/habitat-lab/
  #       pip install -e src/third_party/habitat-lab/habitat-baselines/
  #       echo "Install detectron2..."
  #       git submodule update --init --recursive src/third_party/detectron2
  #       cd $HOME_ROBOT_ROOT
  #       pip install -e src/third_party/detectron2
  #       git submodule update --init --recursive src/home_robot/home_robot/perception/detection/detic/Detic
  #       cd src/home_robot/home_robot/perception/detection/detic/Detic
  #       pip install -r requirements.txt
  #       mkdir models
  #       wget https://dl.fbaipublicfiles.com/detic/Detic_LCOCOI21k_CLIP_SwinB_896b32_4x_ft4x_max-size.pth -O models/Detic_LCOCOI21k_CLIP_SwinB_896b32_4x_ft4x_max-size.pth
  #       cd /home/circleci/project

  #       pip install torch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2 --index-url https://download.pytorch.org/whl/cu118
  #       pip uninstall torch-cluster -y
  #       pip install torch-cluster

  #       pip uninstall pytorch3d  -y
  #       pip install "git+https://github.com/facebookresearch/pytorch3d.git@v0.7.4"

  #       pip uninstall sophus -y
  #       pip uninstall sophuspy -y
  #       pip install sophuspy==0.0.8
  #       pip install albumentations==1.1.0
  #       pip install natsort==8.4.0

  #       echo "Done! :)"
  #     fi
  #   shell: bash
  # - name: Install system deps
  #   run: |-
  #     sudo apt-get update || true
  #     sudo apt-get install -y --no-install-recommends \
  #         build-essential \
  #         git \
  #         curl \
  #         vim \
  #         ca-certificates \
  #         libbullet-dev \
  #         libjpeg-dev \
  #         libglm-dev \
  #         libegl1-mesa-dev \
  #         xorg-dev \
  #         freeglut3-dev \
  #         pkg-config \
  #         wget \
  #         zip \
  #         libhdf5-dev \
  #         unzip || true
  #   shell: bash
  # - name: save_cache
  #   uses: actions/cache@v3.3.2
  #   if: always()
  #   with:
  #     path: "~/miniconda3"
  #     key: conda-env-{{ checksum ".circleci/config.yml" }}-{{ checksum "environment.yml" }}-{{ checksum "requirements.txt" }}-{{ checksum "~/date_stamp.txt" }}
  # - name: Download MobileSAM Model
  #   run: |-
  #     mkdir -p $HOME/.cache/mobile_sam_model
  #     if [ ! -f $HOME/.cache/mobile_sam_model/mobile_sam.pt ]; then
  #       echo "Downloading MobileSAM model"
  #       wget https://github.com/ChaoningZhang/MobileSAM/raw/a509aac54fdd7af59f843135f2f7cee307283c88/weights/mobile_sam.pt --output-document=$HOME/.cache/mobile_sam_model/mobile_sam.pt
  #     else
  #       echo "Using cached MobileSAM model"
  #       cp $HOME/.cache/mobile_sam_model/mobile_sam.pt cortex/utils/pointcloud/mobile_sam_weights/mobile_sam.pt
  #     fi
  #   shell: bash
  # - name: save_cache
  #   uses: actions/cache@v3.3.2
  #   with:
  #     path: "~/.cache/mobile_sam_model"
  #     key: mobile-sam-model
  # - name: restore_cache
  #   uses: actions/cache@v3.3.2
  #   with:
  #     key: ci_test_data_v0.11
  #     path: UPDATE_ME
  #     restore-keys: ci_test_data_v0.11
  # - name: Download Tests data
  #   run: |-
  #     if [ ! -d $HOME/project/data/ase ]; then
  #       echo "Downloading Test data"
  #       cd $HOME/project
  #       mkdir -p tests/data/cache/test || true

  #       mkdir -p data/datasets/ovmm/ || true
  #       wget http://dl.fbaipublicfiles.com/cortex/ci_ovmm_val.zip
  #       unzip -o ci_ovmm_val.zip

  #       mkdir -p test/data || true
  #       wget http://dl.fbaipublicfiles.com/cortex/ci_test_data_v0.11.zip -O ci_test_data.zip
  #       unzip -o ci_test_data.zip
  #       rm -r data/hssd-hab || true; mv large_experiments/cortex/tests/data/hssd-hab data/
  #       rm -r data/eqa-v2 || true; mv -v large_experiments/cortex/tests/data/eqa-v2 data/
  #       rm -r data/ase || true; mv -v large_experiments/cortex/tests/data/ase data/
  #       rm -r data/arkitscenes || true; mv -v large_experiments/cortex/tests/data/arkitscenes data/
  #       rm -r data/objects || true; mv large_experiments/cortex/tests/data/objects data/
  #       rm -r data/scannet || true; mv -v large_experiments/cortex/tests/data/scannet data/
  #       rm -r data/robots || true; mv large_experiments/cortex/tests/data/robots data/
  #       rm -r data/robots || true; mv large_experiments/cortex/tests/data/spot_data data/
  #       rm -r assets || true; mv large_experiments/cortex/tests/data/assets ./
  #     else
  #       echo "Using cached test data"
  #     fi
  #   shell: bash
  # - name: save_cache
  #   uses: actions/cache@v3.3.2
  #   with:
  #     path: |-
  #       ~/project/submodules/home_robot/data
  #       ~/project/tests/data/cache
  #       ~/project/assets
  #     key: ci_test_data_v0.11
